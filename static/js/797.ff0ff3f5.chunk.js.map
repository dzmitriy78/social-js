{"version":3,"file":"static/js/797.ff0ff3f5.chunk.js","mappings":"yLAEaA,EAAkBC,EAAAA,KAAaC,MAAM,CAC9CC,MAAOF,EAAAA,KACFE,QACLC,SAAUH,EAAAA,KACLI,IAAI,EAAG,oCACPC,SAAS,cAELC,EAAiBN,EAAAA,KAAaC,MAAM,CAC7CM,KAAMP,EAAAA,KAEDI,IAAI,EAAG,oCAEPI,IAAI,GAAI,sCACRH,SAAS,e,mGC8ClB,WAAeI,EAAAA,EAAAA,KAJS,SAACC,GAAD,MAAY,CAChCC,OAAQD,EAAME,KAAKD,UAGiB,CAACE,MAAAA,EAAAA,IAAzC,EAtDc,SAAC,GAAoB,IAAnBF,EAAkB,EAAlBA,OAAOE,EAAW,EAAXA,MACnB,OAAIF,GACO,SAAC,KAAD,CAAUG,SAAO,EAACC,GAAG,cAEzB,4BACH,mCACC,SAAC,KAAD,CACGC,cAAe,CACXd,MAAO,GACPC,SAAU,GACVc,YAAY,GAEhBC,SAAU,SAAAC,GACN,IAAMC,EAAS,GAQf,OAPKD,EAAOjB,MAGP,2CAA2CmB,KAAKF,EAAOjB,SAExDkB,EAAOlB,MAAQ,yBAJfkB,EAAOlB,MAAQ,WAMZkB,GAEXE,SAAU,SAACH,EAAD,GAA0B,IAAhBI,EAAe,EAAfA,UAChBV,EAAMM,EAAOjB,MAAOiB,EAAOhB,SAAUgB,EAAOF,WAAYM,IAE5DC,iBAAkBzB,EAAAA,EApBrB,SAqBI,gBAAE0B,EAAF,EAAEA,OAAF,OACG,UAAC,KAAD,YACI,0BACI,SAAC,KAAD,CAAOC,KAAM,OAAQC,KAAM,QAASC,YAAa,cAErD,SAAC,KAAD,CAAcC,MAAO,CAACC,MAAO,OAAQH,KAAM,QAASI,UAAW,SAC/D,0BACI,SAAC,KAAD,CAAOL,KAAM,WAAYC,KAAM,WAAYC,YAAa,gBAE5D,SAAC,KAAD,CAAcC,MAAO,CAACC,MAAO,OAAQH,KAAM,WAAYI,UAAW,SAClE,4BACI,SAAC,KAAD,CAAOL,KAAM,WAAYC,KAAM,gBAC/B,kBAAOK,QAAS,aAAhB,+BAEJ,gBAAKH,MAAO,CAACC,MAAO,OAApB,SAA6BL,KAC7B,mBAAQC,KAAM,SAAd","sources":["components/FormValidation/formSchema.js","components/Login/Login.jsx"],"sourcesContent":["import * as Yup from \"yup\";\r\n\r\nexport const loginFormSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n        .email(),\r\n    password: Yup.string()\r\n        .min(8, \"Must be longer than 8 characters\")\r\n        .required(\"Required\")\r\n})\r\nexport const postFormSchema = Yup.object().shape({\r\n    text: Yup.string()\r\n        //минимальная длина - 2 символа\r\n        .min(2, \"Must be longer than 2 characters\")\r\n        //максимальная длина - 20 символов\r\n        .max(50, \"Must be shorter than 50 characters\")\r\n        .required(\"Required\")\r\n})","import React from 'react';\r\nimport {ErrorMessage, Field, Form, Formik} from \"formik\";\r\nimport {loginFormSchema} from \"../FormValidation/formSchema\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\nconst Login = ({isAuth,login}) => {\r\n    if (isAuth) {\r\n        return <Navigate replace to=\"/profile\"/>\r\n    }\r\n    return <div>\r\n        <h1>Login</h1>\r\n        {<Formik\r\n            initialValues={{\r\n                email: \"\",\r\n                password: \"\",\r\n                rememberMe: false\r\n            }}\r\n            validate={values => {\r\n                const errors = {};\r\n                if (!values.email) {\r\n                    errors.email = 'Required';\r\n                } else if (\r\n                    !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\r\n                ) {\r\n                    errors.email = 'Invalid email address';\r\n                }\r\n                return errors;\r\n            }}\r\n            onSubmit={(values, {setStatus}) => {\r\n                login(values.email, values.password, values.rememberMe, setStatus)\r\n            }}\r\n            validationSchema={loginFormSchema}>\r\n            {({status}) => (\r\n                <Form>\r\n                    <div>\r\n                        <Field type={'text'} name={'email'} placeholder={'e-mail'}/>\r\n                    </div>\r\n                    <ErrorMessage style={{color: \"red\"}} name={\"email\"} component={\"div\"}/>\r\n                    <div>\r\n                        <Field type={'password'} name={'password'} placeholder={'password'}/>\r\n                    </div>\r\n                    <ErrorMessage style={{color: \"red\"}} name={\"password\"} component={\"div\"}/>\r\n                    <div>\r\n                        <Field type={'checkbox'} name={'rememberMe'}/>\r\n                        <label htmlFor={'rememberMe'}> remember me </label>\r\n                    </div>\r\n                    <div style={{color: \"red\"}}>{status}</div>\r\n                    <button type={'submit'}>Log in</button>\r\n                </Form>\r\n            )}\r\n        </Formik>}\r\n\r\n    </div>\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, {login})(Login);\r\n\r\n"],"names":["loginFormSchema","Yup","shape","email","password","min","required","postFormSchema","text","max","connect","state","isAuth","auth","login","replace","to","initialValues","rememberMe","validate","values","errors","test","onSubmit","setStatus","validationSchema","status","type","name","placeholder","style","color","component","htmlFor"],"sourceRoot":""}