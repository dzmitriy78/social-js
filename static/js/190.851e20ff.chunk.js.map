{"version":3,"file":"static/js/190.851e20ff.chunk.js","mappings":"gLACA,G,QAA0B,0BAA1B,EAA4D,wBAA5D,EAA6F,wBAA7F,EAAgI,0BAAhI,EAAoK,yBAApK,EAA4M,8B,SCE/LA,EAAU,SAACC,GACpB,OACI,gBAAKC,UAAWC,EAAhB,SAAkCF,EAAMG,W,UCAnCC,EAAS,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,OAC1BC,EAAO,YAAcH,EACzB,OACI,gBAAKJ,UAAWC,EAAhB,UACI,UAAC,KAAD,CAASD,UAAW,SAACQ,GAAD,OAAiBA,EAAYC,SAAWR,EAAiB,IACpES,GAAIH,EADb,UACoBD,EAAQD,Q,kCCMxC,GAJyBM,E,QAAAA,KACrBC,EAAAA,EAAAA,KAPkB,SAACC,GACnB,MAAO,CACHC,YAAaD,EAAMC,eAKE,CAACC,UAAAA,EAAAA,IAC1BC,EAAAA,EAFqBL,ECNlB,YAA4C,IAA1BG,EAAyB,EAAzBA,YAAaC,EAAY,EAAZA,UAE9BE,EAAiBH,EAAYI,YAC5BC,KAAI,SAACC,EAAGC,GAAJ,OAAU,SAAClB,EAAD,CAAgBG,OAAQc,EAAEd,OAAQD,KAAMe,EAAEf,KAAMD,GAAIgB,EAAEhB,IAAzCiB,MAE5BC,EAAiBR,EAAYS,YAC5BJ,KAAI,SAACK,EAAGH,GAAJ,OAAU,SAACvB,EAAD,CAAiBM,GAAIoB,EAAEpB,GAAIF,QAASsB,EAAEtB,SAAxBmB,MAMjC,OACI,iBAAKrB,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACKgB,KAEL,iBAAKjB,UAAWC,EAAhB,UACKqB,GACD,SAACG,EAAA,EAAD,CAAUC,SAXJ,SAACC,GACfZ,EAAUY,EAAOC,mB,yFCbZC,EAAkBC,EAAAA,KAAaC,MAAM,CAC9CC,MAAOF,EAAAA,KACFE,QACLC,SAAUH,EAAAA,KACLI,IAAI,EAAG,oCACPC,SAAS,cAELC,EAAiBN,EAAAA,KAAaC,MAAM,CAC7CH,KAAME,EAAAA,KAEDI,IAAI,EAAG,oCAEPG,IAAI,GAAI,sCACRF,SAAS,e,wEC6BlB,IAvCiB,SAACpC,GAEd,OACI,0BACK,SAAC,KAAD,CACGuC,cAAe,CACXV,KAAM,IAEVW,SAAU,SAAAZ,GACN,IAAMa,EAAS,GAIf,OAHKb,EAAOC,OACRY,EAAOZ,KAAO,wBAEXY,GAEXC,SAAU,SAACd,EAAD,GAA0B,IAAhBe,EAAe,EAAfA,UAChB3C,EAAM2B,SAASC,GACfe,EAAU,CAACf,OAAQ,MAEvBgB,iBAAkBP,EAAAA,EAfrB,SAiBI,kBACG,UAAC,KAAD,YACI,0BACI,SAAC,KAAD,CAAOQ,UAAW,WACXvC,KAAM,OACNwC,YAAa,oBAExB,SAAC,KAAD,CAAc7C,UAAWC,EAAAA,EAAAA,MACXI,KAAM,OACNuC,UAAW,SACzB,mBAAQE,KAAM,SAAd,gC,iJChCpBC,EAA6B,SAAClC,GAAD,MAAY,CACrCmC,OAAQnC,EAAMoC,KAAKD,SAIdhC,EAAmB,SAACkC,GAAe,IACtCC,EADqC,0IAEvC,WACI,OAAKC,KAAKrD,MAAMiD,QACT,SAACE,GAAD,UAAeE,KAAKrD,SADI,SAAC,KAAD,CAAUsD,SAAO,EAAC3C,GAAG,eAHjB,GACX4C,EAAAA,WAQhC,OAAO1C,EAAAA,EAAAA,IAAQmC,EAARnC,CAAoCuC,K,mBCjB/C,KAAgB,WAAa,4BAA4B,MAAQ,uBAAuB,MAAQ","sources":["webpack://react-kabzda-1/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/Messages/Messages.jsx","components/Dialogs/Dialog/Dialog.jsx","components/Dialogs/DialogsContainer.jsx","components/Dialogs/Dialogs.jsx","components/FormValidation/formSchema.js","components/Form/PostForm.jsx","hoc/withAuthRedirect.js","webpack://react-kabzda-1/./src/components/Profile/MyPosts/MyPosts.module.css?831b"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__wNzGN\",\"active\":\"Dialogs_active__tBTDG\",\"dialog\":\"Dialogs_dialog__p+FmH\",\"messages\":\"Dialogs_messages__pkiNW\",\"message\":\"Dialogs_message__+BSLz\",\"dialogsItems\":\"Dialogs_dialogsItems__CEgNG\",\"error\":\"Dialogs_error__Y5qmK\"};","import React from \"react\";\r\nimport classes from \"./../Dialogs.module.css\"\r\n\r\nexport const Message = (props) => {\r\n    return (\r\n        <div className={classes.message}>{props.message}</div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport classes from \"./../Dialogs.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nexport const Dialog = ({id, name, avatar}) => {\r\n    let path = \"/dialogs/\" + id;\r\n    return (\r\n        <div className={classes.dialog}>\r\n            <NavLink className={(DialogsData) => DialogsData.isActive ? classes.active : \"\"}\r\n                     to={path}>{avatar}{name}</NavLink>\r\n        </div>\r\n    )\r\n}","import {addDialog} from \"../../redux/message-reducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        messagePage: state.messagePage\r\n    }\r\n}\r\n\r\nconst DialogsContainer = compose(\r\n    connect(mapStateToProps, {addDialog} ),\r\n    withAuthRedirect)\r\n(Dialogs)\r\nexport default DialogsContainer","import React from 'react';\r\nimport classes from \"./Dialogs.module.css\"\r\nimport {Message} from \"./Messages/Messages\";\r\nimport {Dialog} from \"./Dialog/Dialog\";\r\nimport PostForm from \"../Form/PostForm\";\r\n\r\nexport function Dialogs({messagePage, addDialog}) {\r\n\r\n    let dialogsElement = messagePage.dialogsData\r\n        .map((d, i) => <Dialog key={i} avatar={d.avatar} name={d.name} id={d.id}/>);\r\n\r\n    let messageElement = messagePage.messageData\r\n        .map((m, i) => <Message key={i} id={m.id} message={m.message}/>);\r\n\r\n    let onAddDialog = (values) => {\r\n        addDialog(values.text)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItems}>\r\n                {dialogsElement}\r\n            </div>\r\n            <div className={classes.messages}>\r\n                {messageElement}\r\n                <PostForm callback={onAddDialog}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import * as Yup from \"yup\";\r\n\r\nexport const loginFormSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n        .email(),\r\n    password: Yup.string()\r\n        .min(8, \"Must be longer than 8 characters\")\r\n        .required(\"Required\")\r\n})\r\nexport const postFormSchema = Yup.object().shape({\r\n    text: Yup.string()\r\n        //минимальная длина - 2 символа\r\n        .min(2, \"Must be longer than 2 characters\")\r\n        //максимальная длина - 20 символов\r\n        .max(50, \"Must be shorter than 50 characters\")\r\n        .required(\"Required\")\r\n})","import React from 'react';\r\nimport {ErrorMessage, Field, Form, Formik} from \"formik\";\r\nimport classes from \"../Profile/MyPosts/MyPosts.module.css\";\r\nimport {postFormSchema} from \"../FormValidation/formSchema\";\r\n\r\nconst PostForm = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            {<Formik\r\n                initialValues={{\r\n                    text: \"\"\r\n                }}\r\n                validate={values => {\r\n                    const errors = {};\r\n                    if (!values.text) {\r\n                        errors.text = 'Enter your post text'\r\n                    }\r\n                    return errors;\r\n                }}\r\n                onSubmit={(values, {resetForm}) => {\r\n                    props.callback(values)\r\n                    resetForm({values: \"\"})\r\n                }}\r\n                validationSchema={postFormSchema}\r\n            >\r\n                {() => (\r\n                    <Form>\r\n                        <div>\r\n                            <Field component={\"textarea\"}\r\n                                   name={'text'}\r\n                                   placeholder={'write a post'}/>\r\n                        </div>\r\n                        <ErrorMessage className={classes.error}\r\n                                      name={\"text\"}\r\n                                      component={\"div\"}/>\r\n                        <button type={'submit'}>Add post</button>\r\n                    </Form>\r\n                )}\r\n            </Formik>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PostForm;","import React from 'react';\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n        isAuth: state.auth.isAuth\r\n    }\r\n)\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Navigate replace to=\"/login\"/>\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__+4lAR\",\"posts\":\"MyPosts_posts__3D7nG\",\"error\":\"MyPosts_error__1k-9Y\"};"],"names":["Message","props","className","classes","message","Dialog","id","name","avatar","path","DialogsData","isActive","to","compose","connect","state","messagePage","addDialog","withAuthRedirect","dialogsElement","dialogsData","map","d","i","messageElement","messageData","m","PostForm","callback","values","text","loginFormSchema","Yup","shape","email","password","min","required","postFormSchema","max","initialValues","validate","errors","onSubmit","resetForm","validationSchema","component","placeholder","type","mapStateToPropsForRedirect","isAuth","auth","Component","RedirectComponent","this","replace","React"],"sourceRoot":""}